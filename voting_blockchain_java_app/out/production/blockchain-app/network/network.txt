Basic concepts of the network:

Messages : transmitted as json objects containing (NEW_BLOCK, CONNECT, etc.)

    1. a message will have an intent which identifies what type of data the message contains so it can be handled accordingly
    2. a sender public key to locate the origin of the m  1. a type which indicate the intent of the message
    3. data which hold the message being sent: likely a block, vote or new node
    4. a signature which validate the integrity of the data whilst also acting as a unique ID


    1. The Intent
        A. NEW_BLOCK: a new block is being transmitted across the nodes
        B. NEW_VOTE: a new vote is being transmitted across the nodes
        C. CONNECT: a new node is attempting to make a connection
        D. ALIVE: a node is checking that it's peer nodes are still active
        E. DISCONNECT: a node is disconnecting and alerting other nodes


    2. Public_Key
        A. If a message is sent that is invalid ( signature does not match data ) then public_key logged, node notified and message not redistributed
        B. If issue reoccurs multiple times node may be added to "blacklist" meaning the node will disconnect and ignore any future messages coming from it

    3. Data
        A. Data will be a json object formatted depending on the intent of the message and outlined in messages.json

    4. Signature
        A. Signature use to verify the integrity of the data being sent
        B. Signature acts as a unique ID and is temporarily cached to prevent the message being redistributed in loops

Node ( Meta Classes) :

    1. LocalNode (class) is where the metadata for "your" node is stored containing:
        General Functionality
            A. Host: The IP-address for the local device
            B. Port: The port number of the local device where the node is running
            C. PublicKey: Send to other nodes as and ID
            D. PrivateKey: Used to sign messages

        Specific Funtionality
            public String getHost() {
                return host id
            }

            public int getPort() {
                return port number
            }

            public PublicKey getPublicKey() {
                return publicKey
            }

            private PrivateKey getPrivateKey() {
                return privateKey
            }

            public SignMessage(passkey) {
                /
            }


    2. ForeignNode (class) stores metadata for other connected nodes containing:
        A. Host: The IP-address for the nodes device
        B. Port: The port number for the node on the device
        C. PublicKey: Used to ID node messages & verify signatures

Node ( Utility Classes )
    1. messageHandling ( package ) used to translate data to and from json containing.
        A. BlockMessageParser
        B. VoteMessageParser
        C. RemoteNodeMessageParser
        D. TBC.

    2. NodeManager
        General Functionality
            A. Updates blacklist.txt nodes
            B. Updates stikelist.txt nodes
            C. Updates known.txt nodes

        specific functionality

            public void blacklist (PublicKey of node) {
                adds node public key to blacklist.txt
                calls disconnect()
            }

            public void strike(PublicKey of node) {
                if (node is already in strike file) {
                    increment node strikes
                    if (node has too many strikes) {
                        call blacklist(node)
                    }
                } else {
                    add node to file with 1 strike
                }
            }

            public void connect(PublicKey of node) {
                if (node in known.txt) {
                    log node already connected
                } else if (node in blacklist.txt) {
                    log node blacklisted
                } else {
                add node to known.txt
                log connected to node
                }
            }

            public void disconnect(PublicKey of node) {
                if (node not in known.txt) {
                    log node is not connected
                } else {
                    remove node from known.txt
                    log disconnected from node
                }
            }



    3. Client.java and Server.java
        A. Client.java sends outgoing messages
        B. Server.java receives incoming messages

    4. blacklisted.txt, striked.txt, known.txt
        A. store the list of respective nodes persistently



